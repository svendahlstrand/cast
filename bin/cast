#!/usr/bin/env osascript -l JavaScript

// Resize applications to fit my screencasting video resolution.
//
// Usage:
// $ cast "Google Chrome" Terminal
// $ cast --revert

var defaults = {
  apps: ['Firefox', 'Safari', 'Google Chrome'],
  width: 1280,
  height: 720,
  fileName: '.cast'
};

var fs = (function () {
  var app = Application.currentApplication();
  app.includeStandardAdditions = true;

  function getPathInHomeDirectory(path) {
    return Path([app.pathTo('home folder'), path].join('/'));
  }

  function writeJSON(path, obj) {
    var file = app.openForAccess(path, { writePermission: true });

    try {
      app.setEof(file, { to: 0 });
      app.write(JSON.stringify(obj), { to: file });
    } catch (e) {}

    app.closeAccess(file);
  }

  function readJSON(path) {
    var file = app.openForAccess(path);
    var str = null;

    try {
      str = app.read(file);
    } catch (e) {}

    app.closeAccess(file);

    return JSON.parse(str || null);
  }

  return {
    getPathInHomeDirectory: getPathInHomeDirectory,
    writeJSON: writeJSON,
    readJSON: readJSON
  };
}());

var caster = (function () {
  function resizeWindow(appName, x, y, width, height) {
    try {
      var app = Application(appName);

      if (!app.running()) { return; }

      app.windows[0].bounds = {
        x: x,
        y: y,
        width: width,
        height: height
      };

      console.log('Resized ' + appName + '.');
    } catch (e) {
      console.log('I\'m having trouble with ' + appName + '. Sorry!');
    }
  }

  function resizeWindows(appNames, x, y, width, height) {
    appNames.forEach(function (appName) {
      resizeWindow(appName, x, y, width, height);
    });
  }

  function getApplicationsBounds(appNames) {
    var bounds = [];

    appNames.forEach(function (appName) {
      try {
        var app = Application(appName);

        if (!app.running()) { return; }

        bounds.push({
          appName: appName,
          bounds: app.windows[0].bounds()
        });
      } catch (e) {}
    });

    return bounds;
  }

  return {
    resizeWindow: resizeWindow,
    resizeWindows: resizeWindows,
    getApplicationsBounds: getApplicationsBounds
  };
}());

function run(argv) {
  var apps;
  var filePath = fs.getPathInHomeDirectory(defaults.fileName);

  if (argv.indexOf('--revert') >= 0) {
    apps = fs.readJSON(filePath);

    if (!apps) { return; }

    apps.forEach(function (app) {
      caster.resizeWindow(app.appName, app.bounds.x, app.bounds.y, app.bounds.width, app.bounds.height);
    });
  } else {
    apps = defaults.apps;

    if (argv.length > 0) {
      apps = argv;
    }

    fs.writeJSON(filePath, caster.getApplicationsBounds(apps));
    caster.resizeWindows(apps, 0, 0, defaults.width, defaults.height);
  }
}
